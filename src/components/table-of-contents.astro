---
import { ArrowUpToLineIcon } from "@lucide/astro";
import type { MarkdownHeading } from "astro";

interface Props {
  headings: MarkdownHeading[];
}

const { headings } = Astro.props;

const MAX_HEADING_DEPTH = 4;

headings.forEach(({ depth, text }) => {
  if (depth === 1 || depth > MAX_HEADING_DEPTH) {
    throw new Error(`Heading "${text}" has depth ${depth}`);
  }
});
---

<aside class="sticky top-0 hidden h-screen overflow-y-auto toc:block">
  <nav>
    <a
      href="#content-begin"
      class="group sticky inset-x-0 top-0 flex flex-col border-b-(length:--border-w) border-dashed border-line-dark bg-sweater-10 p-pad transition-colors hover:bg-sweater-9"
    >
      <span
        class="text-lg leading-snug font-bold text-link-primary transition-colors group-hover:text-link-primary-hover"
        >Sections</span
      >

      <span
        class="flex items-center justify-between leading-none text-link-secondary transition-colors group-hover:text-link-secondary-hover"
      >
        Back to top <ArrowUpToLineIcon size={18} class="stroke-icon" />
      </span>
    </a>

    <div class="flex flex-col text-link-secondary">
      {
        headings.map(({ depth, slug, text }, index) => {
          return (
            <a
              href={`#${slug}`}
              class:list={[
                "pr-pad leading-[1.1] transition-colors first:pt-pad last:pb-pad hover:text-link-primary data-seen:text-link-primary data-seen:hover:text-link-primary-hover",

                depth === 2 ? "pt-[calc(var(--spacing-pad)/1.6)]" : "pt-0.5",

                headings[index + 1]?.depth === 2 ?
                  "pb-[calc(var(--spacing-pad)/1.6)]"
                : "pb-0.5",
              ]}
              style={{ paddingLeft: `calc(${depth - 1} * var(--spacing-pad))` }}
            >
              {text}
            </a>
          );
        })
      }
    </div>
  </nav>
</aside>

<script>
  const observer = new IntersectionObserver((entries) =>
    entries.forEach((entry) => {
      const id = entry.target.id;
      const link = document.querySelector<HTMLAnchorElement>(
        `nav a[href="#${id}"]`,
      );

      const windowHeight = entry.rootBounds!.height;
      if (windowHeight && link) {
        if (entry.boundingClientRect.y < windowHeight) {
          link.dataset["seen"] = "";
        } else {
          delete link.dataset["seen"];
        }
      }
    }),
  );

  document
    .querySelectorAll("h2[id], h3[id], h4[id]")
    .forEach((heading) => observer.observe(heading));
</script>
