---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import type { z } from "astro/zod";
import type { ImageSchema } from "@/content.config";

import { CDN_URL, validProjectCover } from "@/scripts/util";

interface Props {
  id: CollectionEntry<"projects">["id"];
  cover: z.infer<ReturnType<typeof ImageSchema>>;
  useVideo: { small: boolean } | null;
  class?: string;
}

const { id, cover, class: className, useVideo } = Astro.props;
const path = `${CDN_URL}/projects/${id}`;

if (!validProjectCover(cover.img.width, cover.img.height)) {
  throw new Error(
    `Error rendering ${id}: project cover images must have an aspect ratio of 16:10!`,
  );
}
---

<project-cover
  class:list={["relative block aspect-16/10 *:absolute *:inset-0", className]}
  data-use-video={useVideo ? "true" : "false"}
>
  <Image
    src={cover.img}
    alt={cover.alt}
    loading="eager"
    class:list={["bg-sweater-9", useVideo ? "scale-[0.995]" : null]}
  />

  {
    useVideo ?
      <div
        style={{ opacity: 0 }}
        class="transition-opacity will-change-[opacity] motion-reduce:hidden"
      >
        {/* Setting opacity directly on video element doesn't seem to work */}
        <video
          autoplay
          loop
          muted
          playsinline
          preload="auto"
          class="h-full w-full"
        >
          <source
            src={`${path}/${useVideo.small ? "cover-small" : "cover"}.webm`}
            type="video/webm"
          />
          <source src={`${path}/cover.mp4`} type="video/mp4" />
        </video>
      </div>
    : null
  }
</project-cover>

<script>
  import { ProjectCover } from "@/scripts/project-cover";
  customElements.define("project-cover", ProjectCover);
</script>
