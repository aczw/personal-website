---
export const prerender = false;

import { getCollection } from "astro:content";
import ProjectCover from "@/components/project-cover.astro";
import CommonLayout from "@/layouts/common-layout.astro";
import { Filters } from "@/scripts/types";
import ArrowRight from "lucide-astro/ArrowRight";
import CircleX from "lucide-astro/CircleX";

let projects = await getCollection("projects");
projects.sort((a, b) => a.data.order - b.data.order);

const filterParams = Filters.map((filter) => Astro.url.searchParams.has("filter", filter));
const filteredByAny = filterParams.reduce((acc, x) => acc || x);

if (filteredByAny) {
  const index = filterParams.indexOf(true);
  projects = projects.filter((p) => p.data.type === Filters[index]);
}

const videosEnabled = ["path-tracer", "pbr-renderer", "fireball", "door"];
---

<CommonLayout
  meta={{
    kind: "route",
    title: "Projects",
    description: "Projects mostly related to graphics and games.",
    ogImageParams: "Graphics projects and games.",
  }}
>
  <main class="space-y-12 py-12">
    <section class="span-normal animate-fade-in [--order:0]">
      <div
        class="border-sweater-9 380:flex-row 380:items-center sm:gap-space 380:gap-4 flex flex-col gap-2.5 border-y-2 py-4"
      >
        <h2 class="text-sweater-4 w-fit shrink-0 cursor-default leading-none sm:w-1/2 sm:shrink">
          Filter{filteredByAny ? "ed" : ""} by:
        </h2>

        <div class="berkeley flex flex-wrap items-center gap-2.5 [--fade-speed:50ms] sm:w-1/2">
          {
            Filters.map((filter, idx) => {
              const filtered = filterParams[idx];

              return (
                <a
                  title={filtered ? `Remove "${filter}" filter` : `Filter by "${filter}"`}
                  class="pill animate-fade-in flex items-center gap-1.5 leading-none"
                  href={`/projects${filtered ? "" : `?filter=${filter}`}`}
                  data-quiet={!filtered}
                  style={{ "--order": idx + 1 }}
                >
                  {filter} {filtered ? <CircleX size={16} /> : null}
                </a>
              );
            })
          }
        </div>
      </div>
    </section>

    <section class="span-wide 560:grid-cols-2 gap-space grid grid-cols-1 [--fade-speed:40ms]">
      {
        projects.map((project, idx) => {
          const {
            data: { name, blurb, metadata, cover },
            id,
          } = project;

          return (
            <a
              href={`/projects/${id}`}
              class="group animate-fade-in relative h-fit transition-opacity"
              style={{ "--order": idx + 1 }}
            >
              <ProjectCover
                id={id}
                cover={cover}
                useVideo={videosEnabled.includes(id) ? { small: true } : null}
                class="overflow-hidden rounded-t-xl transition group-hover:scale-[0.93] group-hover:opacity-50"
              />

              {import.meta.env.DEV ? (
                <span class="pill absolute top-2.5 left-2.5 leading-none font-bold">
                  {project.data.order}
                </span>
              ) : null}

              <div class="bg-sweater-9 group-hover:bg-sweater-8 absolute inset-x-0 bottom-0 space-y-4 rounded-b-xl px-4 pt-4 transition-[background-color_border-radius] group-hover:rounded-t-xl">
                <div class="flex items-center justify-between gap-4">
                  <div>
                    <h2>{name}</h2>
                    <ul class="flex flex-wrap gap-x-2">
                      {metadata.tech.map((tech, idx) => (
                        <li class="berkeley text-sweater-4">
                          {tech}
                          {idx !== metadata.tech.length - 1 ? (
                            <span aria-hidden="true" class="text-sweater-7">
                              /
                            </span>
                          ) : null}
                        </li>
                      ))}
                    </ul>
                  </div>

                  <ArrowRight
                    size="34"
                    class="bg-sweater-8 stroke-sweater-5 group-hover:bg-sweater-7 group-hover:stroke-sweater-4 shrink-0 rounded-full stroke-[2.5] p-1.5 transition-colors"
                    aria-hidden="true"
                  />
                </div>

                <div class="grid grid-rows-[0fr] transition-[grid-template-rows] group-hover:grid-rows-[1fr]">
                  <div class="overflow-hidden opacity-0 transition-opacity group-hover:opacity-100">
                    <p class="pb-4">{blurb}</p>
                  </div>
                </div>
              </div>

              <div aria-hidden="true" class="p-4 text-transparent">
                <div class="flex items-center justify-between gap-4">
                  <div>
                    <h2>{name}</h2>
                    <li class="flex flex-wrap gap-x-2">
                      {metadata.tech.map((tech, idx) => (
                        <ul class="berkeley">
                          <span>{tech}</span>
                          {idx !== metadata.tech.length - 1 ? <span>/</span> : null}
                        </ul>
                      ))}
                    </li>
                  </div>

                  <div class="rounded-full p-1">
                    <div class="size-[24px]" />
                  </div>
                </div>
              </div>
            </a>
          );
        })
      }
    </section>
  </main>
</CommonLayout>
