---
import { getCollection, type CollectionEntry } from "astro:content";

import { CircleX, ArrowRight } from "lucide-astro";

import MainLayout from "@/layouts/main-layout.astro";
import { Filters } from "@/scripts/types";
import ProjectCover from "@/components/project-cover.astro";
import ProjectCoverControls from "@/components/project-cover-controls.astro";

let projects = await getCollection("projects");
projects.sort((a, b) => a.data.order - b.data.order);

const searchParams = Astro.url.searchParams;
const filterParams = Filters.map((filter) => searchParams.has("filter", filter));

const isFilteredByAny = filterParams.reduce((acc, x) => acc || x);

if (isFilteredByAny) {
  const index = filterParams.indexOf(true);
  projects = projects.filter((p) => p.data.type === Filters[index]);
}

const useVideo: CollectionEntry<"projects">["id"][] = ["path-tracer", "rcw", "fireball"];
---

<MainLayout
  meta={{
    kind: "route",
    title: "Projects",
    description: "Projects I've made, mostly related to graphics, games, and web development.",
    ogImageParams: "Projects I've done.",
  }}
  useMinHeight
  useVerticalSpacing
>
  <section class="space-y-4">
    <h1 class="animate-fade text-xl [--order:0]">
      All projects {isFilteredByAny ? <span class="text-sweater-6">(filtered)</span> : null}
    </h1>

    <div
      class="flex animate-fade items-center justify-between border-y-thin border-sweater-9 [--order:1]"
    >
      <div
        class="flex flex-grow flex-wrap items-center gap-2.5 border-r-thin border-sweater-9 py-4 pr-4"
      >
        <p class="berkeley text-sweater-4">
          Filter{isFilteredByAny ? "ed" : ""} by:
        </p>

        <div class="flex items-center gap-2.5 [--fade-speed:50ms]">
          {
            Filters.map((filter, idx) => {
              const isCurrFiltered = filterParams[idx];

              return (
                <a
                  title={isCurrFiltered ? `Remove "${filter}" filter` : `Filter by "${filter}"`}
                  class="pill flex animate-fade items-center gap-1.5 leading-none"
                  href={`/projects${isCurrFiltered ? "" : `?filter=${filter}`}`}
                  data-quiet={!isCurrFiltered}
                  style={{ "--order": idx + 1 }}
                >
                  {filter} {isCurrFiltered ? <CircleX size={16} /> : null}
                </a>
              );
            })
          }
        </div>
      </div>

      <div class="flex-shrink-0 py-4 pl-4">
        <ProjectCoverControls />
      </div>
    </div>
  </section>

  <section class="grid grid-cols-1 gap-6 [--fade-speed:40ms] sm:grid-cols-2">
    {
      projects.map((project, idx) => {
        const {
          data: { name, blurb, metadata, cover },
          id,
        } = project;

        return (
          <a
            href={`/projects/${id}`}
            class="group relative h-fit animate-fade transition-opacity"
            style={{ "--order": idx }}
          >
            <ProjectCover
              id={id}
              cover={cover}
              useVideo={useVideo.includes(id) ? { small: true } : false}
              class="overflow-hidden rounded-t-xl transition group-hover:scale-[0.93] group-hover:opacity-50"
            />

            {import.meta.env.DEV ? (
              <span class="pill absolute left-2.5 top-2.5 font-bold leading-none">
                {project.data.order}
              </span>
            ) : null}

            <div class="absolute inset-x-0 bottom-0 space-y-4 rounded-b-xl bg-sweater-9 px-4 pt-4 transition-[background-color_border-radius] group-hover:rounded-t-xl group-hover:bg-sweater-8">
              <div class="flex items-center justify-between gap-4">
                <div>
                  <h2>{name}</h2>
                  <li class="flex flex-wrap gap-x-2">
                    {metadata.tech.map((tech, idx) => (
                      <ul class="berkeley text-sweater-5">
                        <span>{tech}</span>
                        {idx !== metadata.tech.length - 1 ? (
                          <span aria-hidden="true" class="text-sweater-7">
                            /
                          </span>
                        ) : null}
                      </ul>
                    ))}
                  </li>
                </div>

                <div
                  aria-hidden="true"
                  class="rounded-full bg-sweater-8 p-1 transition-colors group-hover:bg-sweater-7"
                >
                  <ArrowRight class="shrink-0 stroke-sweater-6 transition-colors group-hover:stroke-sweater-4" />
                </div>
              </div>

              <div class="grid grid-rows-[0fr] transition-[grid-template-rows] group-hover:grid-rows-[1fr]">
                <div class="overflow-hidden text-pretty opacity-0 transition-opacity group-hover:opacity-100">
                  <p>{blurb}</p>
                  <div aria-hidden="true" class="h-4" />
                </div>
              </div>
            </div>

            <div aria-hidden="true" class="p-4 text-transparent">
              <div class="flex items-center justify-between gap-4">
                <div>
                  <h2>{name}</h2>
                  <li class="flex flex-wrap gap-x-2">
                    {metadata.tech.map((tech, idx) => (
                      <ul class="berkeley">
                        <span>{tech}</span>
                        {idx !== metadata.tech.length - 1 ? <span>/</span> : null}
                      </ul>
                    ))}
                  </li>
                </div>

                <div class="rounded-full p-1">
                  <div class="size-[24px]" />
                </div>
              </div>
            </div>
          </a>
        );
      })
    }
  </section>
</MainLayout>
