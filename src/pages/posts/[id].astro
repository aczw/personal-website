---
import { Image } from "astro:assets";
import { getCollection, getEntry, render } from "astro:content";
import type { GetStaticPaths } from "astro";

import { BookOpenIcon, CalendarFoldIcon } from "@lucide/astro";

import {
  getFullDateFormatting,
  getShortDateFormatting,
  validProjectCover,
} from "@/scripts/util";
import ContentLayout from "@/layouts/content-layout.astro";
import ContentWithToc from "@/components/content-with-toc.astro";

export const getStaticPaths = (async () => {
  const posts = await getCollection("posts");
  return posts.map((post) => {
    return { params: { id: post.id } };
  });
}) satisfies GetStaticPaths;

const { id } = Astro.params;
const post = await getEntry("posts", id);

if (!post) {
  throw new Error(`No post with id "${id}" found in collection."`);
}

const {
  data: { title, blurb, posted, cover },
} = post;

if (cover && !validProjectCover(cover.img.width, cover.img.height)) {
  throw new Error("Cover images must have an aspect ratio of 16:10!");
}

const { Content, headings, remarkPluginFrontmatter } = await render(post);

const numMinutes = Math.round(remarkPluginFrontmatter["stats"]["minutes"]);
---

<ContentLayout meta={{ kind: "post", post }}>
  {
    cover ?
      <section class="grid-line-before grid-line-after relative p-pad">
        <Image
          src={cover.img}
          alt={cover.alt}
          loading="eager"
          class="rounded-lg bg-sweater-9 not-dark:bg-sweater-2"
        />
      </section>
    : null
  }

  <section id="content-begin" class="grid-line-before grid-line-after relative">
    <div
      class="space-y-1 border-b-(length:--border-w) border-dashed border-line-dark p-pad"
    >
      <h1
        class="text-2xl leading-tight font-bold text-sweater-2 not-dark:text-sweater-8"
      >
        {title}
      </h1>

      {blurb ? <p class="text-subtitle">{blurb}</p> : null}
    </div>

    <div class="grid grid-cols-1 480:grid-cols-2">
      <div
        class="flex border-b-(length:--border-w) border-dashed border-line-dark 480:border-r-(length:--border-w) 480:border-b-0"
      >
        <div
          class="flex grow flex-row 480:flex-col sm:flex-row sm:items-center"
        >
          <p
            class="shrink-0 border-r-(length:--border-w) border-dashed border-line-dark px-pad pt-pad pb-pad font-bold text-subtitle 480:border-r-0 480:pb-0 sm:border-r-(length:--border-w) sm:pb-pad"
          >
            Posted on
          </p>

          <time
            datetime={posted.toISOString()}
            title={getFullDateFormatting(posted)}
            class="grow px-pad pt-pad pb-pad 480:pt-0 sm:pt-pad"
          >
            {getShortDateFormatting(posted)}
          </time>
        </div>

        <div class="p-pad">
          <CalendarFoldIcon size={18} class="shrink-0 stroke-icon" />
        </div>
      </div>

      <div class="flex">
        <div
          class="flex grow flex-row 480:flex-col sm:flex-row sm:items-center"
        >
          <p
            class="shrink-0 border-r-(length:--border-w) border-dashed border-line-dark px-pad pt-pad pb-pad font-bold text-subtitle 480:border-r-0 480:pb-0 sm:border-r-(length:--border-w) sm:pb-pad"
          >
            Read time
          </p>

          <p class="grow px-pad pt-pad pb-pad 480:pt-0 sm:pt-pad">
            {numMinutes}
            {numMinutes > 1 ? "minutes" : "minute"}
          </p>
        </div>

        <div class="p-pad">
          <BookOpenIcon size={18} class="shrink-0 stroke-icon" />
        </div>
      </div>
    </div>
  </section>

  <ContentWithToc content={Content} headings={headings} />
</ContentLayout>
