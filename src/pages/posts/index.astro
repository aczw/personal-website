---
import { getCollection } from "astro:content";

import ContentLayout from "@/layouts/content-layout.astro";
import PostPublishedStatus from "@/components/dev/post-published-status.astro";
import { CircleX } from "lucide-astro";

let posts = await getCollection("posts");
posts.sort((a, b) => b.data.posted.getTime() - a.data.posted.getTime());

// TODO
const searchParams = Astro.url.searchParams;
const filteredByGraphics = searchParams.has("filter", "graphics");
---

<ContentLayout
  minHeight
  meta={{
    kind: "route",
    title: "Posts",
    description: "Writings on some stuff that I've done.",
    ogImageParams: "All my posts.",
  }}
>
  <section>
    <h1 class="animate-fade text-xl [--order:0]">All posts</h1>
    <div class="flex items-center gap-2.5">
      {
        filteredByGraphics ? (
          <>
            <p class="berkeley text-sweater-4">Filtered by:</p>
            <a
              title={'Remove "graphics" filter'}
              href="/posts"
              class="pill flex items-center gap-1.5 leading-none"
              data-quiet
            >
              graphics <CircleX size={14} />
            </a>
          </>
        ) : null
      }
    </div>
  </section>

  <section
    class:list={[
      "flex flex-col [--fade-speed:25ms]",
      { "[&>a:not(:hover)]:hover:brightness-50": !filteredByGraphics },
    ]}
  >
    {
      posts.map((post, idx) => {
        let {
          data: { title, blurb, tags, posted, published },
          slug,
        } = post;

        return (
          <a
            href={`/posts/${slug}`}
            class:list={[
              "group flex animate-fade flex-col gap-4 border-y-thin border-b-sweater-9/0 border-t-sweater-9 py-4 transition-[filter_opacity] xs:flex-row xs:gap-8 hover:[&:not(:last-child)]:border-b-sweater-9/100",
              {
                "brightness-[0.3] hover:brightness-[0.8]":
                  filteredByGraphics && !tags.includes("graphics"),
              },
            ]}
            style={{ "--order": idx + 1 }}
          >
            <time
              datetime={posted.toISOString()}
              title={posted.toLocaleString("en-US", {
                month: "long",
                day: "numeric",
                year: "numeric",
                hour: "numeric",
                minute: "numeric",
                timeZone: "America/New_York",
                timeZoneName: "short",
              })}
              class="berkeley shrink-0 text-sweater-5 transition-colors group-hover:text-sweater-4"
            >
              <span class="xs:hidden">
                {posted.toLocaleDateString("en-US", {
                  month: "long",
                  day: "numeric",
                  year: "numeric",
                  timeZone: "America/New_York",
                })}
              </span>
              <span class="hidden xs:inline">
                {posted.toLocaleDateString("en-US", {
                  month: "2-digit",
                  day: "2-digit",
                  year: "2-digit",
                  timeZone: "America/New_York",
                })}
              </span>
            </time>

            <div class="space-y-1.5">
              <h2 class="break-words">
                <PostPublishedStatus published={published} />
                {title}
              </h2>
              <p class="subtitle transition-[color_opacity] group-hover:text-sweater-1 group-hover:opacity-100">
                {blurb}
              </p>
            </div>
          </a>
        );
      })
    }
  </section>
</ContentLayout>
