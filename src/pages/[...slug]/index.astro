---
/**
 * Note that the reason any of this even works is because of the way Astro calculates
 * route priority. Also see https://docs.astro.build/en/guides/routing/#route-priority-order
 */

import { Image } from "astro:assets";

import ContentLayout from "@/layouts/content-layout.astro";

import Link from "@/components/link.astro";

Astro.response.status = 404;
Astro.response.statusText = "Page not found";

let fun = [
  "WFSTH",
  "pagenotfound",
  "soitgoes",
  "aczw",
  "newfaces",
  "doitagain",
  "tilinfinity",
  "suboptimal",
  "promiseme",
  "allitcosts",
];

let pick = fun[Math.floor(Math.random() * fun.length)];
let offset = Math.floor(Math.random() * pick.length);
let scrambled = pick.slice(offset) + pick.slice(0, offset);

let requestUrl = new URL(Astro.request.url);
let params = requestUrl.searchParams;
const hasUwu = params.has("uwu");
---

<ContentLayout
  minHeight
  className="flex flex-col items-center justify-center"
  meta={{
    kind: "route",
    title: "404",
    description: "Sorry, this page doesn't exist.",
    ogImageParams: "Page not found.",
  }}
>
  {
    hasUwu ? (
      <Image
        src={import("@/assets/not-found.png")}
        alt="Page not found"
        class="mb-16 w-[clamp(400px,80%,500px)] animate-fade [--order:0]"
      />
    ) : (
      <p
        id="scroll"
        aria-hidden="true"
        data-scrambled={scrambled}
        class="w-fit animate-fade cursor-not-allowed rounded-full bg-sweater-9 px-6 py-2 font-mono text-[clamp(30px,7vw,90px)] italic text-sweater-7 [--order:0] sm:px-12"
      >
        {scrambled}
      </p>
    )
  }

  <section class="flex animate-fade flex-col items-center [--order:1]">
    <p>
      {
        hasUwu ? (
          <Link href="https://twitter.com/sawaratsuki1004" target="_blank">
            {"Source."}
          </Link>
        ) : null
      }

      <span class="subtitle">Sorry, that's a 404. Page not found~</span>
    </p>
  </section>
</ContentLayout>

<script>
  // For some reason, whitespace is added to the front and end of the word, so we can't
  // use scroll.textContent directly at first. instead, store the scrambled word in the dataset
  let scroll = document.getElementById("scroll");

  // Scroll element is only visible if ?uwu mode is off
  if (scroll) {
    let text = scroll.dataset["scrambled"]!;

    // Remove it because now it's unnecessary and looks ugly lol
    delete scroll.dataset["scrambled"];

    setInterval(() => {
      scroll.textContent = text.slice(1) + text[0];
      text = scroll.textContent;
    }, 350);
  }
</script>
